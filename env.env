<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js" crossorigin="anonymous"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Metrophobic&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Metrophobic&family=Righteous&display=swap');
        body {
            background-color: #f4f4f4;
            font-family: Arial, sans-serif;
        }

        .sidebar {
    width: 250px;
    background: linear-gradient(135deg, rgb(234, 78, 237) 0%, rgb(105, 35, 107) 100%);
    color: white;
    height: 100vh;
    position: fixed;
    padding: 20px;
    border-radius: 0px 31px 0px 0px;
    display: flex;
    flex-direction: column;
    align-items: center;
}

        /* Brand and Logo Styling */
.brand-container {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    position: relative;
    width: 100%;
    margin-bottom: 20px;
    margin-top: 20px;
}

.brand-name {
    font-family: "Righteous", Helvetica;
    font-weight: 400;
    color: rgb(255, 215, 0); /* Gold color */
    font-size: 24px;
    letter-spacing: 7.20px;
}

.logo {
    position: relative;
    width: 50px;
    height: 50px;
    left: -10px;
}

/* Logo Background */
.logo-bg {
    position: absolute;
    width: 65px;
    height: 65px;
    background-color: #111010f0;
    border-radius: 50%;
    left: 83%;
    transform: translateX(-50%);
    z-index: -1;
}

.links{
    margin-top: 50px;
}

/* Sidebar Links */
.sidebar a {
    font-family: "Metrophobic", Helvetica;
    font-size: 20px;
    font-weight: 400;
    line-height: normal;
    color: white;
    text-decoration: none;
    display: flex;
    align-items: center;
    padding: 12px;
    margin-right: 10px;
    width: 100%;
    transition: background 0.3s;
    border-radius: 5px;
}

.sidebar a:hover {
    background: rgba(255, 255, 255, 0.2);
}


/* Responsive Sidebar */
@media (max-width: 768px) {
    .sidebar {
        width: 100%;
        height: auto;
        position: relative;
        padding: 15px;
    }

    .brand-container {
        flex-direction: column;
        text-align: center;
    }

    .logo {
        margin-left: 0;
    }

    .sidebar a {
        justify-content: center;
    }
}


        .content {
            margin-left: 270px;
            padding: 20px;
        }
        .row {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
        }
        .class-card {
            background: linear-gradient(135deg, #a4508b, #5f0a87);
            color: white;
            text-align: center;
            padding: 20px;
            border-radius: 10px;
            cursor: pointer;
            transition: transform 0.2s;
            margin: 20px;
            width: 220px;
        }
        .class-card:hover {
            transform: scale(1.05);
        }
        .no-classes {
            background: rgba(0, 0, 0, 0.1);
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            font-weight: bold;
            color: #333;
        }

        .tip-box {
            background: rgba(0, 0, 0, 0.05);
            padding: 12px 15px;
            border-radius: 10px;
            font-style: italic;
            text-align: center;
            margin-bottom: 20px;
            border-left: 06px solid #007bff; /* Highlighted border */
            font-size: 14px;
            color: #333;
            max-width: 60%;
            margin-left: auto;
            margin-right: auto;
        }

@media (max-width: 768px) {
    .tip-box {
        max-width: 100%;
    }
}

        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            .content {
                margin-left: 0;
            }
            .tip-box {
                max-width: 100%;
            }
        }

        /* All href icons are below*/
    .home{
        justify-content: flex-start;
    }

    .home .home_icon{
        height: 20px;
        width: 20px;
    }

    .calendar{
        justify-content: flex-start;
    }

    .calendar .calendar_icon{
        height: 20px;
        width: 20px;
    }

    .myclasses{
        justify-content: flex-start;
    }

    .myclasses .myclasses_icon{
        height: 20px;
        width: 20px;
    }

    .settings{
        justify-content: flex-start;
    }

    .settings .settings_icon{
        height: 20px;
        width: 20px;
    }

    /**/
    .links div {
    display: flex;
    align-items: center;
    padding: 10px;
    transition: background 0.3s;
    white-space: nowrap;
    padding-left: 25px;
}

.links div:hover {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 5px;
}

.links img {
    height: 20px;
    width: 20px;
    margin-right: 10px; /* Spacing between icon and text */
}

.title {
    flex-direction: column;
    text-align: center;
    display: flex; /* Aligns text and image in a row */
    align-items: center; /* Vertically centers elements */
    gap: 15px;
    margin-bottom: 20px; /* Adds spacing between text and GIF */
}

.title-content {
    display: flex;
    align-items: center; /* Aligns GIF and h2 in the same row */
    gap: 0px; /* Adds spacing between GIF and h2 */
}

.title h2 {
    font-family: "Metrophobic",Arial, Helvetica, sans-serif;
    font-size: 32px; /* Adjusts text size */
    font-weight: 400;
    line-height: normal;
    font-style: normal;
    color: #4a00e0; /* Matches your theme */
    margin: 0; /* Removes default margin */
}

h4 {
    margin-top: 20px;
    font-family: 'Metrophobic', Arial, Helvetica, sans-serif;
    font-size: 24px;
    font-weight: 500;
    font-style: normal;
}

.title img {
    width: 105px; /* Adjust GIF size */
    height: 93px;
    mix-blend-mode: multiply;
}

.title p {
    font-family: "Metal";
    font-size: 24px;
    font-style: normal;
    font-weight: 400;
    line-height: normal;
    margin-top: 5px; /* Adds space between h2 and quote */
    color: #000;
}

    </style>
</head>
<body>
    <!-- <div class="sidebar">
        <h2>Learnit</h2>
        <a href="#"><i class="fas fa-home"></i> Home</a>
        <a href="#"><i class="fas fa-calendar-alt"></i> Learnit Calendar</a>
        <a href="#"><i class="fas fa-chalkboard-teacher"></i> My Classes</a>
        <a href="#"><i class="fas fa-cog"></i> Settings</a>
    </div> -->

    <div class="sidebar">
        <div class="brand-container">
            <div class="brand-name">Learni</div>
            <img src="/images/logo.png" alt="LearniX Logo" class="logo">
            <div class="logo-bg"></div>
        </div>
    
        <div class="links">
            <div class="home">
                <img src="/images/home.png" alt="home_icon" class="home_icon">
                <a href="#">Home</a>
            </div>
            <div class="calendar">
                <img src="/images/calendar.png" alt="calendar_icon" class="calendar_icon">
                <a href="#">LearniX Calendar</a>
            </div>
            <div class="myclasses">
                <img src="/images/enrolled.png" alt="myclasses_icon" class="myclasses_icon">
                <a href="#">My Classes</a>
            </div>
            <!-- Add this new chatbot option -->
            <div class="chatbot">
               
                <a href="/chatbot">BOT</a>
            </div>
            <div class="settings">
                <img src="/images/settings.png" alt="settings_icon" class="settings_icon">
                <a href="#">Settings</a>
            </div>
        </div>
    </div>
        </div>
    </div>
    
    <div class="content">
        <div class="title">
            <div class="title-content">
                <h2>Welcome, <%= teacher.email %> ðŸ‘‹</h2> 
            </div>
        </div>

        <!-- ðŸŽ¯ Productivity Tip -->
        <div class="tip-box">
            <strong>Tip for Today:</strong> <span id="tip">Loading...</span>
        </div>

        <div>
            <p><strong>School:</strong> <%= teacher.schoolName %></p>
            <p><strong>Region:</strong> <%= teacher.region %></p>

        <h4>Your Classes:</h4>
        <div class="row">
            <% if (classes.length === 0) { %>
                <div class="no-classes">No classes assigned yet.</div>
            <% } else { %>
                <% classes.forEach(classItem => { %>
                    <% classItem.subjects.forEach(subject => { %> 
                        <div class="class-card" 
                            onclick="window.location.href='/teacher/dashboard/class/<%= classItem.classNumber %>/<%= subject %>'">
                            <h5>Class <%= classItem.classNumber %> - <%= subject %></h5>
                        </div>
                    <% }) %>
                <% }) %>
            <% } %>
        </div>
    </div>
</div>

    <script>
        // Random Productivity Tip Generator
        const tips = [
            "Use short quizzes to reinforce key concepts in class.",
            "Encourage students to ask 'why' to deepen their understanding.",
            "Give quick, meaningful feedback to keep students motivated.",
            "Use real-life examples to make lessons more relatable.",
            "Set clear expectations at the start of every class.",
            "Incorporate more student-led discussions to boost engagement.",
            "Break lessons into smaller chunks to improve retention.",
            "Make use of visuals and diagrams for better explanations."
        ];
        document.getElementById("tip").innerText = tips[Math.floor(Math.random() * tips.length)];
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


dashboard.ejs





<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Science Tutor</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            color: #4b2e83;
            text-align: center;
        }
        
        .chat-container {
            max-height: 60vh;
            overflow-y: auto;
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid #ddd;
            border-radius: 10px;
            background-color: #fafafa;
        }
        
        .message {
            margin-bottom: 15px;
            padding: 12px 16px;
            border-radius: 18px;
            max-width: 80%;
            font-size: 16px;
            line-height: 1.5;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .user-message {
            background-color: #FFFACD;
            color: black;
            border-radius: 18px 18px 0 18px;
            margin-left: auto;
        }
        
        .assistant-message {
            background-color: #D8BFD8;
            color: black;
            border-radius: 18px 18px 18px 0;
            margin-right: auto;
        }
        
        .input-area {
            display: flex;
            gap: 10px;
        }
        
        #userInput {
            flex-grow: 1;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 20px;
            font-size: 16px;
            outline: none;
        }
        
        #userInput:focus {
            border-color: #6a0dad;
        }
        
        #sendButton {
            padding: 12px 24px;
            background-color: #6a0dad;
            color: white;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        
        #sendButton:hover {
            background-color: #5d0a9b;
        }
        
        .typing-indicator {
            display: inline-block;
            padding: 10px;
        }
        
        .typing-dot {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #666;
            margin: 0 2px;
            animation: typingAnimation 1.4s infinite ease-in-out;
        }
        
        .typing-dot:nth-child(1) {
            animation-delay: 0s;
        }
        
        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }
        
        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }
        
        @keyframes typingAnimation {
            0%, 60%, 100% { transform: translateY(0); }
            30% { transform: translateY(-5px); }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Professor Minakshi's Science Tutor ðŸ§ª</h1>
        
        <div class="chat-container" id="chatContainer">
            <div class="message assistant-message">
                Hi there! I'm Professor Minakshi, your science tutor. What would you like to learn about today?
            </div>
        </div>
        
        <div class="input-area">
            <input type="text" id="userInput" placeholder="Ask me anything about science...">
            <button id="sendButton">Send</button>
        </div>
    </div>

    <script>
        // Configuration
        const TEACHER_NAME = "Professor Minakshi";
        const CONCEPTS_BEFORE_MCQ = 3;
        const FALLBACK_ANSWERS = {
            "plant require animals for photosynthesis": 
                "No, plants don't need animals for photosynthesis. They only need sunlight, carbon dioxide, and water.",
            "plant require cow's milk for photosynthesis": 
                "No, plants do not require cow's milk for photosynthesis. They use sunlight, carbon dioxide, and water to produce their own food.",
            "leichen": 
                "Lichens are a symbiotic association between a fungus and a chlorophyll-containing partner, such as an alga. The fungus provides shelter, water, and certain nutrients, while the alga provides food through photosynthesis."
        };

        // Application state
        const state = {
            messages: [
                { role: "assistant", content: `Hi there! I'm ${TEACHER_NAME}, your science tutor. What would you like to learn about today?` }
            ],
            conceptCount: 0,
            recentConcepts: [],
            waitingForAnswer: false,
            currentQuestion: null
        };

        // DOM elements
        const chatContainer = document.getElementById('chatContainer');
        const userInput = document.getElementById('userInput');
        const sendButton = document.getElementById('sendButton');

        // Initialize the application
        function init() {
            sendButton.addEventListener('click', handleUserInput);
            userInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') handleUserInput();
            });
        }

        // Handle user input
        async function handleUserInput() {
            const message = userInput.value.trim();
            if (!message) return;

            addMessage('user', message);
            userInput.value = '';

            if (state.waitingForAnswer) {
                const evaluation = await evaluateAnswer(state.currentQuestion, message);
                addMessage('assistant', evaluation);
                state.waitingForAnswer = false;
                state.currentQuestion = null;
            } else {
                showTypingIndicator();
                const response = await generateResponse(message);
                removeTypingIndicator();
                
                addMessage('assistant', response);
                state.recentConcepts.push(message);
                state.conceptCount++;

                if (response.includes('?')) {
                    const questions = response.split('\n').filter(line => line.includes('?'));
                    if (questions.length > 0) {
                        state.waitingForAnswer = true;
                        state.currentQuestion = questions[questions.length - 1];
                    }
                }
            }
        }

        // Generate response using actual API call to Python backend
        async function generateResponse(query) {
            // First check fallback answers
            const queryLower = query.toLowerCase().trim();
            for (const [key, answer] of Object.entries(FALLBACK_ANSWERS)) {
                if (queryLower.includes(key.toLowerCase())) {
                    return answer;
                }
            }

            try {
                const response = await fetch('http://localhost:8000/api/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ query })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                return data.answer;

            } catch (error) {
                console.error('Error fetching response:', error);
                return "Sorry, I encountered an error while processing your request.";
            }
        }

        // Evaluate answer using actual API call to Python backend
        async function evaluateAnswer(question, userAnswer) {
            try {
                const response = await fetch('http://localhost:8000/api/evaluate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        question: question,
                        user_answer: userAnswer
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                return data.evaluation;

            } catch (error) {
                console.error('Error evaluating answer:', error);
                return "That's an interesting perspective! Let's explore another topic.";
            }
        }

        // Add message to chat
        function addMessage(role, content) {
            state.messages.push({ role, content });
            renderMessages();
        }

        // Render all messages
        function renderMessages() {
            chatContainer.innerHTML = state.messages.map(message => `
                <div class="message ${message.role}-message">
                    ${message.content}
                </div>
            `).join('');
            
            // Scroll to bottom
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        // Show typing indicator
        function showTypingIndicator() {
            const typingDiv = document.createElement('div');
            typingDiv.className = 'message assistant-message typing-indicator';
            typingDiv.id = 'typingIndicator';
            typingDiv.innerHTML = `
                <span class="typing-dot"></span>
                <span class="typing-dot"></span>
                <span class="typing-dot"></span>
            `;
            chatContainer.appendChild(typingDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        // Remove typing indicator
        function removeTypingIndicator() {
            const typingIndicator = document.getElementById('typingIndicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }

        // Initialize the app when DOM is loaded
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>




chatbot.ejs
